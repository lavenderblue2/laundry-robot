@model List<(AdministratorWeb.Models.Room room, int usersCount, int beaconsCount)>
@{
    ViewData["Title"] = "Room Management";
}

<!-- Dashboard Header -->
<div class="mb-8 animate-slide-up">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-white mb-2">Room Management</h1>
            <p class="text-slate-400 flex items-center">
                <i data-lucide="home" class="w-4 h-4 mr-2"></i>
                Manage room templates and assignments
            </p>
        </div>
        <div class="flex items-center space-x-3">
            <div class="flex items-center space-x-2">
                <select id="statusFilter" class="px-3 py-2 bg-slate-700/50 border border-slate-600/50 rounded-xl text-white text-sm focus:outline-none focus:ring-2 focus:ring-brand-500/50 focus:border-transparent">
                    <option value="all">All Rooms</option>
                    <option value="active">Active Only</option>
                    <option value="inactive">Inactive Only</option>
                </select>
            </div>
            <a asp-action="Create" class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-brand-600 to-indigo-600 hover:from-brand-700 hover:to-indigo-700 text-white text-sm font-medium rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl">
                <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                Add Room
            </a>
        </div>
    </div>
</div>

<!-- Stats Cards -->
<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8 animate-slide-up" style="animation-delay: 0.1s;">
    <div class="bg-slate-800/50 backdrop-blur-xl shadow-xl rounded-2xl border border-slate-700/50 p-6">
        <div class="flex items-center">
            <div class="p-3 bg-brand-500/20 rounded-xl mr-4">
                <i data-lucide="home" class="h-6 w-6 text-brand-400"></i>
            </div>
            <div>
                <p class="text-sm font-medium text-slate-400">Total Rooms</p>
                <p class="text-2xl font-bold text-white">@Model.Count()</p>
            </div>
        </div>
    </div>
    
    <div class="bg-slate-800/50 backdrop-blur-xl shadow-xl rounded-2xl border border-slate-700/50 p-6">
        <div class="flex items-center">
            <div class="p-3 bg-green-500/20 rounded-xl mr-4">
                <i data-lucide="check-circle" class="h-6 w-6 text-green-400"></i>
            </div>
            <div>
                <p class="text-sm font-medium text-slate-400">Active Rooms</p>
                <p class="text-2xl font-bold text-white">@Model.Count(r => r.IsActive)</p>
            </div>
        </div>
    </div>
    
    <div class="bg-slate-800/50 backdrop-blur-xl shadow-xl rounded-2xl border border-slate-700/50 p-6">
        <div class="flex items-center">
            <div class="p-3 bg-orange-500/20 rounded-xl mr-4">
                <i data-lucide="pause-circle" class="h-6 w-6 text-orange-400"></i>
            </div>
            <div>
                <p class="text-sm font-medium text-slate-400">Inactive Rooms</p>
                <p class="text-2xl font-bold text-white">@Model.Count(r => !r.IsActive)</p>
            </div>
        </div>
    </div>
    
    <div class="bg-slate-800/50 backdrop-blur-xl shadow-xl rounded-2xl border border-slate-700/50 p-6">
        <div class="flex items-center">
            <div class="p-3 bg-purple-500/20 rounded-xl mr-4">
                <i data-lucide="clock" class="h-6 w-6 text-purple-400"></i>
            </div>
            <div>
                <p class="text-sm font-medium text-slate-400">Recent Additions</p>
                <p class="text-2xl font-bold text-white">@Model.Count(r => r.CreatedAt >= DateTime.UtcNow.AddDays(-7))</p>
            </div>
        </div>
    </div>
</div>

<!-- Rooms Table -->
<div class="bg-slate-800/50 backdrop-blur-xl shadow-xl rounded-2xl border border-slate-700/50 animate-slide-up" style="animation-delay: 0.2s;">
    <div class="px-8 py-6 border-b border-slate-700/50">
        <div class="flex items-center justify-between">
            <h3 class="text-xl font-bold text-white flex items-center">
                <i data-lucide="list" class="w-5 h-5 mr-2 text-slate-400"></i>
                Room List
            </h3>
            <div class="flex items-center space-x-2">
                <div class="relative">
                    <i data-lucide="search" class="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400"></i>
                    <input type="text" id="searchInput" placeholder="Search rooms..." class="pl-10 pr-4 py-2 bg-slate-700/50 border border-slate-600/50 rounded-xl text-white text-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-brand-500/50 focus:border-transparent w-64">
                </div>
            </div>
        </div>
    </div>
    
    @if (!Model.Any())
    {
        <div class="text-center py-16">
            <div class="p-4 bg-slate-700/30 rounded-2xl inline-block mb-4">
                <i data-lucide="home" class="w-12 h-12 text-slate-400"></i>
            </div>
            <h3 class="text-xl font-semibold text-white mb-2">No Rooms Found</h3>
            <p class="text-slate-400 mb-6">Get started by creating your first room template.</p>
            <a asp-action="Create" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-brand-600 to-indigo-600 hover:from-brand-700 hover:to-indigo-700 text-white font-medium rounded-xl transition-all duration-200">
                <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                Create First Room
            </a>
        </div>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="w-full" id="roomsTable">
                <thead class="bg-slate-700/30">
                    <tr>
                        <th class="px-8 py-4 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Room Name</th>
                        <th class="px-8 py-4 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Status</th>
                        <th class="px-8 py-4 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Description</th>
                        <th class="px-8 py-4 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Created</th>
                        <th class="px-8 py-4 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Usage</th>
                        <th class="px-8 py-4 text-right text-xs font-medium text-slate-300 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-slate-700/50" id="roomsTableBody">
                    @foreach (var item in Model.OrderBy(i => i.room.Name))
                    {
                        var room = item.room;
                        <tr class="hover:bg-slate-700/20 transition-colors duration-200 room-row" data-status="@(room.IsActive ? "active" : "inactive")" data-name="@room.Name.ToLower()">
                            <td class="px-8 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="p-2 bg-brand-500/20 rounded-lg mr-3">
                                        <i data-lucide="home" class="w-4 h-4 text-brand-400"></i>
                                    </div>
                                    <div>
                                        <div class="text-sm font-medium text-white">@room.Name</div>
                                        <div class="text-sm text-slate-400">ID: @room.Id</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-8 py-4 whitespace-nowrap">
                                @if (room.IsActive)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-500/20 text-green-400 border border-green-500/30">
                                        <i data-lucide="check-circle" class="w-3 h-3 mr-1"></i>
                                        Active
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-500/20 text-gray-400 border border-gray-500/30">
                                        <i data-lucide="pause-circle" class="w-3 h-3 mr-1"></i>
                                        Inactive
                                    </span>
                                }
                            </td>
                            <td class="px-8 py-4">
                                <div class="text-sm text-slate-300 max-w-xs truncate">
                                    @if (!string.IsNullOrEmpty(room.Description))
                                    {
                                        @room.Description
                                    }
                                    else
                                    {
                                        <span class="text-slate-500 italic">No description</span>
                                    }
                                </div>
                            </td>
                            <td class="px-8 py-4 whitespace-nowrap">
                                <div class="text-sm text-slate-300">@room.CreatedAt.ToString("MMM dd, yyyy")</div>
                                <div class="text-sm text-slate-400">@room.CreatedAt.ToString("HH:mm")</div>
                            </td>
                            <td class="px-8 py-4 whitespace-nowrap">
                                <div class="text-sm text-slate-300">
                                    <div class="flex items-center mb-1">
                                        <i data-lucide="users" class="w-3 h-3 mr-1 text-slate-400"></i>
                                        <span>Users: @item.usersCount</span>
                                    </div>
                                    <div class="flex items-center">
                                        <i data-lucide="radio" class="w-3 h-3 mr-1 text-slate-400"></i>
                                        <span>Beacons: @item.beaconsCount</span>
                                    </div>
                                </div>
                            </td>
                            <td class="px-8 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <div class="flex items-center justify-end space-x-2">
                                    <a asp-action="Details" asp-route-id="@room.Id" class="inline-flex items-center px-3 py-1.5 bg-slate-600/50 hover:bg-slate-600 text-slate-300 hover:text-white text-xs font-medium rounded-lg transition-all duration-200">
                                        <i data-lucide="eye" class="w-3 h-3 mr-1"></i>
                                        View
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@room.Id" class="inline-flex items-center px-3 py-1.5 bg-brand-600/50 hover:bg-brand-600 text-brand-300 hover:text-white text-xs font-medium rounded-lg transition-all duration-200">
                                        <i data-lucide="edit" class="w-3 h-3 mr-1"></i>
                                        Edit
                                    </a>
                                    <button onclick="toggleRoomStatus(@room.Id, @room.IsActive.ToString().ToLower())" class="inline-flex items-center px-3 py-1.5 @(room.IsActive ? "bg-orange-600/50 hover:bg-orange-600 text-orange-300" : "bg-green-600/50 hover:bg-green-600 text-green-300") hover:text-white text-xs font-medium rounded-lg transition-all duration-200">
                                        @if (room.IsActive)
                                        {
                                            <i data-lucide="pause" class="w-3 h-3 mr-1"></i>
                                            <span>Deactivate</span>
                                        }
                                        else
                                        {
                                            <i data-lucide="play" class="w-3 h-3 mr-1"></i>
                                            <span>Activate</span>
                                        }
                                    </button>
                                    <a asp-action="Delete" asp-route-id="@room.Id" class="inline-flex items-center px-3 py-1.5 bg-red-600/50 hover:bg-red-600 text-red-300 hover:text-white text-xs font-medium rounded-lg transition-all duration-200">
                                        <i data-lucide="trash-2" class="w-3 h-3 mr-1"></i>
                                        Delete
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Initialize lucide icons when page loads
        document.addEventListener('DOMContentLoaded', function() {
            lucide.createIcons();
        });
        
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('.room-row');
            
            rows.forEach(row => {
                const roomName = row.getAttribute('data-name');
                if (roomName.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
        
        // Status filter functionality
        document.getElementById('statusFilter').addEventListener('change', function(e) {
            const filterValue = e.target.value;
            const rows = document.querySelectorAll('.room-row');
            
            rows.forEach(row => {
                const status = row.getAttribute('data-status');
                if (filterValue === 'all' || status === filterValue) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
        
        // Toggle room status
        async function toggleRoomStatus(roomId, isActive) {
            try {
                const response = await fetch(`/Rooms/ToggleStatus`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: `id=${roomId}`
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    showNotification(result.message, 'success');
                    // Reload page to update the display
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                console.error('Error toggling room status:', error);
                showNotification('Failed to toggle room status', 'error');
            }
        }
        
        // Show notification (you can implement this based on your notification system)
        function showNotification(message, type) {
            // Simple notification implementation
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${type === 'success' ? 'bg-green-600' : 'bg-red-600'}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>
}