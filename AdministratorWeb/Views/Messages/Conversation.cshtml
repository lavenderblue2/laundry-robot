@model IEnumerable<AdministratorWeb.Models.Message>
@{
    ViewData["Title"] = "Chat with " + ViewBag.CustomerName;
    var customerId = ViewBag.CustomerId as string;
    var customerName = ViewBag.CustomerName as string;
}

<div class="animate-fade-in h-full">
    <!-- Header -->
    <div class="mb-6">
        <a href="@Url.Action("Index")" class="inline-flex items-center gap-2 text-slate-400 hover:text-brand-400 transition-colors duration-200 mb-4">
            <i data-lucide="arrow-left" class="w-4 h-4"></i>
            <span class="text-sm font-medium">Back to Messages</span>
        </a>
    </div>

    <!-- Chat Container -->
    <div class="bg-slate-800/50 backdrop-blur-xl rounded-2xl border border-slate-700/50 shadow-xl overflow-hidden flex flex-col" style="height: calc(100vh - 250px); min-height: 600px;">
        <!-- Chat Header -->
        <div class="bg-gradient-to-r from-brand-600 to-indigo-600 px-6 py-4 flex-shrink-0">
            <div class="flex items-center gap-4">
                <div class="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg border-2 border-white/30">
                    <span class="text-white font-bold text-lg">
                        @customerName.Substring(0, 1).ToUpper()
                    </span>
                </div>
                <div class="flex-1">
                    <h2 class="text-lg font-semibold text-white">@customerName</h2>
                    <p class="text-sm text-white/70 font-mono">ID: @customerId.Substring(0, 8)</p>
                </div>
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                    <span class="text-sm text-white/90">Active</span>
                </div>
            </div>
        </div>

        <!-- Messages Container -->
        <div id="messageContainer" class="flex-1 overflow-y-auto p-6 space-y-4" style="background: linear-gradient(to bottom, rgb(15 23 42 / 0.3), rgb(30 41 59 / 0.2));">
            <div id="messages" class="space-y-4">
                @foreach (var message in Model)
                {
                    var isAdmin = message.SenderType == "Admin";
                    var alignClass = isAdmin ? "justify-end" : "justify-start";

                    <div class="flex @alignClass message-item animate-slide-up">
                        <div class="max-w-[70%] @(isAdmin ? "order-2" : "order-1")">
                            <!-- Message Bubble -->
                            <div class="@(isAdmin ? "bg-gradient-to-r from-brand-600 to-indigo-600 text-white rounded-2xl rounded-br-md" : "bg-slate-700/50 backdrop-blur-sm text-white rounded-2xl rounded-bl-md border border-slate-600/50") px-4 py-3 shadow-lg">
                                <!-- Header -->
                                <div class="flex items-center gap-2 mb-2 opacity-90">
                                    <i data-lucide="@(isAdmin ? "shield" : "user")" class="w-3 h-3"></i>
                                    <span class="text-xs font-semibold">@message.SenderName</span>
                                    <span class="text-xs opacity-70">â€¢</span>
                                    <span class="text-xs opacity-70">
                                        @message.SentAt.ToString("MMM dd, hh:mm tt")
                                    </span>
                                </div>

                                <!-- Image -->
                                @if (!string.IsNullOrEmpty(message.ImageUrl))
                                {
                                    <div class="mb-3">
                                        <img src="@message.ImageUrl"
                                             class="rounded-xl max-w-full h-auto cursor-pointer hover:opacity-90 transition-opacity duration-200 shadow-lg"
                                             style="max-width: 300px;"
                                             onclick="window.open('@message.ImageUrl', '_blank')"
                                             alt="Image attachment" />
                                    </div>
                                }

                                <!-- Content -->
                                @if (!string.IsNullOrEmpty(message.Content))
                                {
                                    <p class="text-sm leading-relaxed whitespace-pre-wrap break-words">@message.Content</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Input Container -->
        <div class="flex-shrink-0 bg-slate-800/80 backdrop-blur-xl border-t border-slate-700/50">
            <!-- Image Preview -->
            <div id="imagePreview" class="hidden px-6 pt-4">
                <div class="inline-block relative bg-slate-700/50 rounded-xl p-2 border border-slate-600/50">
                    <img id="previewImg" src="" class="rounded-lg max-h-24" />
                    <button type="button"
                            id="removeImageBtn"
                            class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center transition-colors duration-200 shadow-lg">
                        <i data-lucide="x" class="w-4 h-4"></i>
                    </button>
                </div>
            </div>

            <!-- Input Form -->
            <form id="messageForm" enctype="multipart/form-data" class="p-4">
                <div class="flex items-end gap-3">
                    <!-- Image Button -->
                    <input type="file" id="imageInput" accept="image/*" class="hidden" />
                    <button type="button"
                            id="imageBtn"
                            class="flex-shrink-0 w-10 h-10 bg-slate-700 hover:bg-slate-600 text-slate-300 hover:text-white rounded-xl flex items-center justify-center transition-all duration-200 border border-slate-600/50"
                            title="Attach image">
                        <i data-lucide="image" class="w-5 h-5"></i>
                    </button>

                    <!-- Message Input -->
                    <div class="flex-1 relative">
                        <textarea id="messageContent"
                                  rows="1"
                                  class="block w-full px-4 py-3 bg-slate-700/50 border border-slate-600/50 rounded-xl text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-brand-500/50 focus:border-transparent transition-all duration-200 resize-none"
                                  placeholder="Type your message..."
                                  autocomplete="off"
                                  style="min-height: 44px; max-height: 120px;"></textarea>
                    </div>

                    <!-- Send Button -->
                    <button type="submit"
                            id="sendBtn"
                            class="flex-shrink-0 px-6 h-11 bg-gradient-to-r from-brand-600 to-indigo-600 hover:from-brand-700 hover:to-indigo-700 text-white font-medium rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i data-lucide="send" class="w-4 h-4"></i>
                        <span>Send</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let lastMessageId = @(Model.Any() ? Model.Max(m => m.Id) : 0);
        const customerId = '@customerId';

        // Scroll to bottom of messages
        function scrollToBottom(smooth = true) {
            const container = document.getElementById('messageContainer');
            if (smooth) {
                container.scrollTo({
                    top: container.scrollHeight,
                    behavior: 'smooth'
                });
            } else {
                container.scrollTop = container.scrollHeight;
            }
        }

        // Initial scroll
        setTimeout(() => scrollToBottom(false), 100);

        // Auto-resize textarea
        const textarea = document.getElementById('messageContent');
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });

        // Image attachment handling
        document.getElementById('imageBtn').addEventListener('click', () => {
            document.getElementById('imageInput').click();
        });

        document.getElementById('imageInput').addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('previewImg').src = e.target.result;
                    document.getElementById('imagePreview').classList.remove('hidden');
                    lucide.createIcons();
                }
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('removeImageBtn').addEventListener('click', () => {
            document.getElementById('imageInput').value = '';
            document.getElementById('imagePreview').classList.add('hidden');
        });

        // Send message
        document.getElementById('messageForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const content = textarea.value.trim();
            const imageFile = document.getElementById('imageInput').files[0];

            if (!content && !imageFile) {
                return;
            }

            const formData = new FormData();
            formData.append('customerId', customerId);
            formData.append('content', content);
            if (imageFile) {
                formData.append('image', imageFile);
            }

            const sendBtn = document.getElementById('sendBtn');
            sendBtn.disabled = true;

            // HARDCODED URL - Url.Action was generating wrong route
            const sendMessageUrl = '/Messages/SendMessage';
            console.log('Sending message to:', sendMessageUrl);

            try {
                const response = await fetch(sendMessageUrl, {
                    method: 'POST',
                    body: formData
                });

                // Check if response is OK
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    // IMPORTANT: Update lastMessageId FIRST to prevent polling from duplicating
                    lastMessageId = result.message.id;

                    // Add message to UI
                    addMessageToUI(result.message, true);

                    // Clear form
                    textarea.value = '';
                    textarea.style.height = 'auto';
                    document.getElementById('imageInput').value = '';
                    document.getElementById('imagePreview').classList.add('hidden');

                    scrollToBottom();
                } else {
                    alert('Failed to send message: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Failed to send message: ' + error.message);
            } finally {
                sendBtn.disabled = false;
                textarea.focus();
            }
        });

        // Add message to UI
        function addMessageToUI(message, isAdmin) {
            const alignClass = isAdmin ? 'justify-end' : 'justify-start';
            const sentAt = new Date(message.sentAt);
            const timeStr = sentAt.toLocaleString('en-US', {
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            });

            let imageHtml = '';
            if (message.imageUrl) {
                imageHtml = `
                    <div class="mb-3">
                        <img src="${message.imageUrl}"
                             class="rounded-xl max-w-full h-auto cursor-pointer hover:opacity-90 transition-opacity duration-200 shadow-lg"
                             style="max-width: 300px;"
                             onclick="window.open('${message.imageUrl}', '_blank')"
                             alt="Image attachment" />
                    </div>
                `;
            }

            let contentHtml = '';
            if (message.content) {
                contentHtml = `<p class="text-sm leading-relaxed whitespace-pre-wrap break-words">${escapeHtml(message.content)}</p>`;
            }

            const bubbleClass = isAdmin
                ? 'bg-gradient-to-r from-brand-600 to-indigo-600 text-white rounded-2xl rounded-br-md'
                : 'bg-slate-700/50 backdrop-blur-sm text-white rounded-2xl rounded-bl-md border border-slate-600/50';

            const iconType = isAdmin ? 'shield' : 'user';

            const html = `
                <div class="flex ${alignClass} message-item animate-slide-up">
                    <div class="max-w-[70%] ${isAdmin ? 'order-2' : 'order-1'}">
                        <div class="${bubbleClass} px-4 py-3 shadow-lg">
                            <div class="flex items-center gap-2 mb-2 opacity-90">
                                <i data-lucide="${iconType}" class="w-3 h-3"></i>
                                <span class="text-xs font-semibold">${escapeHtml(message.senderName)}</span>
                                <span class="text-xs opacity-70">â€¢</span>
                                <span class="text-xs opacity-70">${timeStr}</span>
                            </div>
                            ${imageHtml}
                            ${contentHtml}
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('messages').insertAdjacentHTML('beforeend', html);
            lucide.createIcons();
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Poll for new messages every 3 seconds
        setInterval(async function() {
            try {
                const response = await fetch(`/Messages/GetNewMessages?customerId=${customerId}&lastMessageId=${lastMessageId}`);
                const result = await response.json();

                if (result.success && result.messages.length > 0) {
                    result.messages.forEach(function(message) {
                        const isAdmin = message.senderType === 'Admin';
                        addMessageToUI(message, isAdmin);
                        lastMessageId = message.id;
                    });
                    scrollToBottom();
                }
            } catch (error) {
                console.error('Error polling messages:', error);
            }
        }, 3000);

        // Focus on input
        textarea.focus();

        // Allow Enter to send (Shift+Enter for new line)
        textarea.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                document.getElementById('messageForm').dispatchEvent(new Event('submit'));
            }
        });

        // Initialize Lucide icons
        document.addEventListener('DOMContentLoaded', function() {
            lucide.createIcons();
        });
    </script>
}
