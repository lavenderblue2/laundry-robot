using System;
using System.Collections.Generic;

namespace RobotProject.Shared.DTOs
{
    /// <summary>
    /// Response DTO for robot-server two-way metadata communication
    /// Contains data that the server sends back to the robot during periodic data exchange
    /// This DTO is designed to be extensible for future server configuration requirements
    /// </summary>
    public class RobotDataExchangeResponse
    {
        /// <summary>
        /// Timestamp when this response was generated by the server
        /// </summary>
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
        
        /// <summary>
        /// Whether the data exchange was successful
        /// </summary>
        public bool Success { get; set; } = true;
        
        /// <summary>
        /// Any messages or instructions from the server to the robot
        /// </summary>
        public List<string> Messages { get; set; } = new();
        
        /// <summary>
        /// List of active Bluetooth beacons that the robot should track
        /// This is the primary configuration data being exchanged in the initial implementation
        /// </summary>
        public List<BeaconConfigurationDto> ActiveBeacons { get; set; } = new();
        
        /// <summary>
        /// Global RSSI threshold setting for beacon detection
        /// </summary>
        public int DefaultRssiThreshold { get; set; } = -40;
        
        /// <summary>
        /// How often the robot should perform data exchange (in seconds)
        /// </summary>
        public int DataExchangeIntervalSeconds { get; set; } = 1;
        
        /// <summary>
        /// Configuration settings for robot behavior
        /// </summary>
        public Dictionary<string, object>? Configuration { get; set; }
        
        /// <summary>
        /// Software update information (if available)
        /// </summary>
        public SoftwareUpdateDto? SoftwareUpdate { get; set; }
        
        /// <summary>
        /// Emergency stop or safety commands
        /// </summary>
        public bool EmergencyStop { get; set; } = false;
        
        /// <summary>
        /// Maintenance mode flag - tells robot to return to base and await service
        /// </summary>
        public bool MaintenanceMode { get; set; } = false;
        
        /// <summary>
        /// Whether the robot should be following line or not
        /// This is the only control needed - robot will line follow if true, stop if false
        /// </summary>
        public bool IsLineFollowing { get; set; } = false;
        
        /// <summary>
        /// Current robot navigation status for mobile app
        /// </summary>
        public string? RobotStatus { get; set; }
        
        /// <summary>
        /// Whether robot has reached user's room (for mobile app)
        /// </summary>
        public bool AtUserRoom { get; set; } = false;

        /// <summary>
        /// RGB color bytes for line following [R, G, B] or null for default black detection
        /// </summary>
        public byte[]? FollowColor { get; set; } = null;

        /// <summary>
        /// RGB color bytes for floor color detection [R, G, B] or null for beacon-only navigation
        /// When set, robot stops when this floor color is detected near the line
        /// </summary>
        public byte[]? StopAtColor { get; set; } = null;

        /// <summary>
        /// Maximum weight allowed per request in kilograms
        /// Robot will alert and stop if weight exceeds this value
        /// </summary>
        public decimal? MaxWeightKg { get; set; }

        /// <summary>
        /// Minimum weight per request in kilograms
        /// Used for billing calculation (charges minimum even if actual weight is less)
        /// </summary>
        public decimal? MinWeightKg { get; set; }
    }

    /// <summary>
    /// Configuration information for a Bluetooth beacon
    /// Used by the server to tell the robot which beacons to track and their settings
    /// </summary>
    public class BeaconConfigurationDto
    {
        /// <summary>
        /// MAC address of the beacon
        /// </summary>
        public string MacAddress { get; set; } = string.Empty;
        
        /// <summary>
        /// Human-readable name of the beacon
        /// </summary>
        public string Name { get; set; } = string.Empty;
        
        /// <summary>
        /// Room name associated with this beacon
        /// </summary>
        public string RoomName { get; set; } = string.Empty;
        
        /// <summary>
        /// RSSI threshold for this specific beacon
        /// </summary>
        public int RssiThreshold { get; set; } = -40;
        
        /// <summary>
        /// Whether this beacon is active and should be tracked
        /// </summary>
        public bool IsActive { get; set; } = true;
        
        /// <summary>
        /// Priority of this beacon for navigation (higher = more important)
        /// </summary>
        public int Priority { get; set; } = 1;
        
        /// <summary>
        /// Whether the robot should navigate to this beacon
        /// When true, robot will stop when it gets close to this beacon
        /// </summary>
        public bool IsNavigationTarget { get; set; } = false;
        
        /// <summary>
        /// Whether this beacon represents the base/laundry room location
        /// </summary>
        public bool IsBase { get; set; } = false;
    }
    
    /// <summary>
    /// Information about available software updates
    /// </summary>
    public class SoftwareUpdateDto
    {
        /// <summary>
        /// Version number of the available update
        /// </summary>
        public string Version { get; set; } = string.Empty;
        
        /// <summary>
        /// Download URL for the update
        /// </summary>
        public string DownloadUrl { get; set; } = string.Empty;
        
        /// <summary>
        /// Description of changes in this update
        /// </summary>
        public string Description { get; set; } = string.Empty;
        
        /// <summary>
        /// Whether this update is mandatory
        /// </summary>
        public bool IsMandatory { get; set; } = false;
    }
}